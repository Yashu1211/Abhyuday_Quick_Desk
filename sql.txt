create database qdmdb;

use qdmdb;


//Stores predefined roles: End User, Agent, Admin
CREATE TABLE roles (
    role_id INT PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(50) UNIQUE NOT NULL
);


//Stores all users and links to a role
CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (role_id) REFERENCES roles(role_id)
);


//Ticket categories (managed by admin)
CREATE TABLE categories (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


//Predefined ticket status values
CREATE TABLE ticket_statuses (
    status_id INT PRIMARY KEY AUTO_INCREMENT,
    status_name VARCHAR(50) UNIQUE NOT NULL
);


//Main ticket table
CREATE TABLE tickets (
    ticket_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    user_id INT NOT NULL,        -- who created
    agent_id INT,                -- assigned to (nullable)
    category_id INT NOT NULL,
    status_id INT NOT NULL,      -- references ticket_statuses
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (agent_id) REFERENCES users(user_id),
    FOREIGN KEY (category_id) REFERENCES categories(category_id),
    FOREIGN KEY (status_id) REFERENCES ticket_statuses(status_id)
);


//Threaded messages for a ticket
CREATE TABLE ticket_comments (
    comment_id INT PRIMARY KEY AUTO_INCREMENT,
    ticket_id INT NOT NULL,
    user_id INT NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

//File attachments related to tickets
CREATE TABLE ticket_attachments (
    attachment_id INT PRIMARY KEY AUTO_INCREMENT,
    ticket_id INT NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    file_path VARCHAR(255) NOT NULL,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)
);


//Lookup table for UPVOTE / DOWNVOTE
CREATE TABLE vote_types (
    vote_type_id INT PRIMARY KEY AUTO_INCREMENT,
    vote_name VARCHAR(50) UNIQUE NOT NULL
);


//User votes on tickets
CREATE TABLE ticket_votes (
    vote_id INT PRIMARY KEY AUTO_INCREMENT,
    ticket_id INT NOT NULL,
    user_id INT NOT NULL,
    vote_type_id INT NOT NULL,
    voted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    UNIQUE(ticket_id, user_id),
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (vote_type_id) REFERENCES vote_types(vote_type_id)
);


//Triggered when ticket status changes or a reply is added
CREATE TABLE notifications (
    notification_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    ticket_id INT NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)
);

//optional for tracking logins
CREATE TABLE login_audit (
    log_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    action VARCHAR(20) NOT NULL, -- e.g. 'LOGIN', 'LOGOUT'
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users(user_id)
);


//Roles
INSERT INTO roles (role_name) VALUES ('END_USER'), ('AGENT'), ('ADMIN');

//Ticket Statuses
INSERT INTO ticket_statuses (status_name) VALUES ('OPEN'), ('IN_PROGRESS'), ('RESOLVED'), ('CLOSED');

//Vote Types
INSERT INTO vote_types (vote_name) VALUES ('UPVOTE'), ('DOWNVOTE');

INSERT INTO categories (name, description)
VALUES ('Technical', 'Technical issues'),
       ('Billing', 'Billing related issues'),
       ('General', 'General queries');

